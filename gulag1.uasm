| CACACHO, Jean Maximus
| DURON, Joseph Jr
| ONG, Paolo Gabriel

| sum of all even entries in a n-sized array
| DATA will contain 32-bit int dictating array size
| n amount of 32-bit integers that are the array elements
| program should add even integers (even negative ones)
| store result right after array

| DATA = [3, -5, 12, -14, 1]
| result = -2

| beta ISA gives a modulus operator for free
| int evenSum = 0;
| for (int i = 0; i < DATA.length; i++) {
|    if (DATA[i] % 2 == 0) evenSum += DATA[i];
| }

.include beta.uasm

| for this set of inputs expected sum is 18 (0x12)
DATA: LONG(5)  | array size
      LONG(3)  | first entry
      LONG(6)
      LONG(9)
      LONG(12)
      LONG(15) | last entry 

result: LONG(0) | sum of all even array entries

main:
      LD(r31, DATA, r0) | r0 will have array size
      ADD(r31, r31, r1)  | r1 will hold sum
      ADD(r31, r31, r2)  | r2 will hold array index

loop:
      CMPLT(r2, r0, r3)  | current index less than array size?
      BEQ(r3, done, r31) | if index >= array size then loop done

      LD(r2, DATA, r4)   | put current entry into r4
      ANDC(r4, 1, r5)    | will return 1 if odd, 0 if even
      BNE(r5, next, r31) | if odd then skip

      ADD(r5, r1, r1)    | add even number to the running sum

next:
      ADDC(r2, 4, r2)
      BR(loop)

done:
      ST(r2, result, r31) | put result into main memory
      HALT()